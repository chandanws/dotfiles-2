<snippet>
	<content>
class A implements Iterable &lt;${2:PRIMATIVE_WRAPPER_CLASS}&gt; {
  public ${1:PRIMATIVE_TYPE} [] arr;
  public int cap = 0, len = 0;
  public A() { this(4); }
  public A(int cap) { arr = new ${1:PRIMATIVE_TYPE}[(this.cap = cap)]; }
  public int size() { return len; }
  public boolean isEmpty() { return len == 0; }
  public ${1:PRIMATIVE_TYPE} get(int i) { return arr[i]; } // or array.arr[i]
  public void set(int i, ${1:PRIMATIVE_TYPE} elem) { arr[i] = elem; }
  public void add(${1:PRIMATIVE_TYPE} elem) {
    if (len+1 &gt;= cap) {
      if (cap == 0) cap = 1; else cap &lt;&lt;= 1;
      arr = java.util.Arrays.copyOf(arr, cap); // pads with extra 0/null elements
    } arr[len++] = elem;
  } public void removeAt(int rm_index) {
    System.arraycopy(arr, rm_index+1, arr, rm_index, len - rm_index - 1 ); 
    --len; --cap;
  } public boolean remove(${1:PRIMATIVE_TYPE} elem) {
    for (int i = 0; i &lt; len; i++) {if (arr[i] == elem) {removeAt(i); return true; } }
    return false;
  } public void reverse() {
    for(int i = 0; i &lt; len/2; i++) {
      ${1:PRIMATIVE_TYPE} tmp = arr[i];
      arr[i] = arr[len - i - 1];
      arr[len - i - 1] = tmp;
    }
  } // Make sure this array is sorted! Returns a value &lt; 0 if item is not found
  public int binarySearch(${1:PRIMATIVE_TYPE} key) {
    int i = java.util.Arrays.binarySearch(arr, 0, len, key);
    // if (i &lt; 0) i = -i - 1; // If not found this will tell you where to insert
    return i;
  } public void sort() { java.util.Arrays.sort( arr, 0, len ); }
  @Override public Iterator &lt;${2:PRIMATIVE_WRAPPER_CLASS}&gt; iterator () {
    return new Iterator &lt;${2:PRIMATIVE_WRAPPER_CLASS}&gt; () { int i = 0;
      public boolean hasNext() { return i &lt; len; }
      public ${2:PRIMATIVE_WRAPPER_CLASS} next() { return arr[i++]; } };
  } @Override public String toString() {
    if (len == 0) return "[]";
    else {StringBuilder sb = new StringBuilder( len ).append("[");
      for (int i = 0; i &lt; len-1; i++ ) sb.append(arr[i] + ", " );
      return sb.append(arr[len-1] + "]").toString();
    }
  }
}
</content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ms_array</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.java</scope>
</snippet>














