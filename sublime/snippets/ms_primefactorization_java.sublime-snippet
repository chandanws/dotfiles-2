<snippet>
  <content>
  static ArrayList &lt;Long&gt; primeFactorization(long n) {
    ArrayList &lt;Long&gt; factors = new ArrayList&lt;&gt;();
    if (n &lt;= 0) throw new IllegalArgumentException();
    else if (n == 1) return factors;
    PriorityQueue &lt;Long&gt; divisorQueue = new PriorityQueue&lt;&gt;();
    divisorQueue.add(n);
    while (!divisorQueue.isEmpty()) {
      long divisor = divisorQueue.remove();
      if (isPrime(divisor)) {
        factors.add(divisor);
        continue;
      }
      long next_divisor = pollardRho(divisor);
      if (next_divisor == divisor) {
        divisorQueue.add(divisor);
      } else {
        divisorQueue.add(next_divisor);
        divisorQueue.add(divisor / next_divisor);
      }
    }
    return factors;
  }

  static long pollardRho(long n) {
    if (n % 2 == 0) return 2;
    long x = 2 + (long)(999999 * Math.random());
    long c = 2 + (long)(999999 * Math.random());
    long y = x;
    long d = 1;
    while (d == 1) {
      x = (x * x + c) % n;
      y = (y * y + c) % n;
      y = (y * y + c) % n;
      d = gcd(Math.abs(x - y), n);
      if (d == n) break;
    }
    return d;
  }

  static long gcd(long a, long b) {
    return b == 0 ? (a &lt; 0 ? -a : a) : gcd(b, a % b);
  }

  static boolean isPrime(final long n) {
    if (n &lt; 2) return false;
    if (n == 2 || n == 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    long limit = (long) Math.sqrt(n);
    for (long i = 5; i &lt;= limit; i += 6)
      if (n % i == 0 || n % (i + 2) == 0)
        return false;
    return true;
  }</content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>ms_primefactorization</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java</scope>
</snippet>
